/**ANDREI JAY: GENERAL SHADER UTILITY FUNCTIONS 2: color (GLSL 2 edition, untested in GLES or WebGL yet)**/

//all colors normalized from 0-1

//COLOR conversions
vec3 rgb2hsb(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsb2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


vec3 rgb2hsv(vec3 c ){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz),
                 vec4(c.gb, K.xy),
                 step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r),
                 vec4(c.r, p.yzx),
                 step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),
                d / (q.x + e),
                q.x);
}

vec3 hsv2rgb(vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0,
                     0.0,
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

//to do: NORMALIZE U and V from -.5 to .5 to 1,1
vec3 rgb2yuv(vec3 c){
	vec3 yuv=vec3(0.0,0.0,0.0);

	yuv.x=0.299*c.r+0.587*c.g+0.114*c.b;
	yuv.y=-0.147*c.r-0.289*c.g+0.436*c.b;
	yuv.z=0.615*c.r-0.515*c.g-0.1*c.b;

	yuv.yz+=.5;

	return yuv;
}

vec3 yuv2rgb(vec3 c){
	vec3 rgb=vec3(0.0,0.0,0.0);

	c.yz-=.5;

	rgb.r=c.x+1.14*c.z;
	rgb.g=c.x-0.395*c.y-0.581*c.z;
	rgb.b=c.x+2.032*c.y;

	//rgb=fract(abs(rgb));
	return rgb;
}

 const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);
 const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);
 const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);

 const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);
 const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);
 const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);

vec3 rgb2yiq(vec3 c){
	vec3 yiq=vec3(0.0,0.0,0.0);

	yiq.x=dot(c,kRGBToYPrime);
	yiq.y=dot(c,kRGBToI);
	yiq.z-dot(c,kRGBToQ);

	yiq.yz+=.5;

	return yiq;
}

vec3 yiq2rgb(vec3 c){
	vec3 rgb=vec3(0.0,0.0,0.0);

	c.yz-=.5;

	rgb.r=dot(c,kYIQToR);
	rgb.g=dot(c,kYIQToG);
	rgb.b=dot(c,kYIQToB);
	
	//rgb=clamp(rgb, vec3(0.0),vec3(1.0));
	return rgb;
}

//COLOR operations

vec4 colorAttenuate(vec4 inColor, vec3 inColorAttenuate){
 
 	inColor.xyz=inColor.xyz*(1.0+inColorAttenuate.xyz);

	return inColor;
}

vec4 colorOffset(vec4 inColor, vec3 inColorOffset){
 
 	inColor.xyz+=inColorOffset.xyz;

	return inColor;
}

float wrap(float inColor){

	if(inColor<0.0){
		inColor=1.0-abs(inColor);
	}

	if(inColor>1.0){
		inColor=fract(inColor);
	}

	return inColor;
}

float foldover(float inColor){

	if(inColor<0.0){
		inColor=abs(inColor);
	}

	if(inColor>1.0){
		inColor=1.0-(fract(inColor));
	}

	if(inColor<0.0){
		inColor=abs(inColor);
	}
	return inColor;
}

float colorInvert(float inColor, vec2 invertSwitch){

	inColor=invertSwitch.x*inColor
			 +invertSwitch.y*abs(1.0-inColor);
	return inColor;
}

//vectorize
vec4 colorLevels(vec4 inColor, vec3 levels1,vec3 levels2,vec3 levels3){
	
	//levels1
	if(inColor.x<=.5){ 
		inColor.x=2.0*(levels1.y-levels1.x)*inColor.x+levels1.x;
		//inColor=smoothstep(inColor,level1,level2);
    }
	
	if(inColor.x>.5){ 
		inColor.x=2.0*(levels1.z-levels1.y)*inColor.x+(levels1.y-.5);
		//inColor=smoothstep(inColor,level2,level3);
    }
	//levels2
	if(inColor.y<=.5){ 
		inColor.y=2.0*(levels2.y-levels2.x)*inColor.y+levels2.x;
		//inColor=smoothstep(inColor,level1,level2);
    }
	
	if(inColor.y>.5){ 
		inColor.y=2.0*(levels2.z-levels2.y)*inColor.y+(levels2.y-.5);
		//inColor=smoothstep(inColor,level2,level3);
    }

	//levels3
	if(inColor.z<=.5){ 
		inColor.z=2.0*(levels3.y-levels3.x)*inColor.z+levels3.x;
		//inColor=smoothstep(inColor,level1,level2);
    }
	
	if(inColor.z>.5){ 
		inColor.z=2.0*(levels3.z-levels3.y)*inColor.z+(levels3.y-.5);
		//inColor=smoothstep(inColor,level2,level3);
    }

	return inColor;
}

vec4 colorPowmap(vec4 inColor, vec3 powmap){
	
	inColor.xyz=pow(inColor.xyz,powmap.xyz);

	return inColor;
}

float colorQuantize(float inColor, float amount, float amountInvert){
	
	inColor=inColor*amount;
	inColor=floor(inColor);
	inColor=inColor*amountInvert;

	return inColor;
}

//all the following is dithering biz
const int indexMatrix4x4[16] = int[](0,  8,  2,  10,
                                     12, 4,  14, 6,
                                     3,  11, 1,  9,
                                     15, 7,  13, 5);

const int indexMatrix8x8[64] = int[](0,  32, 8,  40, 2,  34, 10, 42,
                                     48, 16, 56, 24, 50, 18, 58, 26,
                                     12, 44, 4,  36, 14, 46, 6,  38,
                                     60, 28, 52, 20, 62, 30, 54, 22,
                                     3,  35, 11, 43, 1,  33, 9,  41,
                                     51, 19, 59, 27, 49, 17, 57, 25,
                                     15, 47, 7,  39, 13, 45, 5,  37,
                                     63, 31, 55, 23, 61, 29, 53, 21);

//uniform vec3 ditherPalette[8];
//uniform int ditherPaletteSize;

float[2] closestColors(float inColor,float paletteSize){
	float ret[2];
	float closest=-2.0;
	float secondClosest=-2.0;
	float temp;

	//float paletteSize=8;

	for(int i=0;i<paletteSize;i++){
		temp=i/paletteSize;
		float tempDistance=distance(temp,inColor);
		if( tempDistance<distance(closest,inColor) ){
			secondClosest=closest;
			closest=temp;
		}
		else{
			if( tempDistance<distance(secondClosest,inColor) ){
				secondClosest=temp;
			}
		}
	
	}

	ret[0]=closest;
	ret[1]=secondClosest;

	return ret;
}

float dither(float inColor,vec2 inCoord){
	//index value
	int x=int(mod(inCoord.x,4));
	int y=int(mod(inCoord.y,4));
	//float indexValue=indexMatrix4x4[(x+y*4)]*.0625;
	float indexValue=indexMatrix8x8[(x+y*8)]*.015625;

	float closestColor=(inColor < 0.5) ? 0.0 : 1.0;
	float secondClosestColor = 1.0 - closestColor;
	float dist=abs(closestColor-inColor);
	
	return (dist < indexValue) ? closestColor : secondClosestColor;
}

float dither2(float inColor,vec2 inCoord,float ditherPalette){
	//index value
	int x=int(mod(inCoord.x,4));
	int y=int(mod(inCoord.y,4));
	//float indexValue=indexMatrix4x4[(x+y*4)]*.0625;
	float indexValue=indexMatrix8x8[(x+y*8)]*.015625;

	float[2] cs=closestColors(inColor,ditherPalette);

	float closestColor=cs[0];
	float secondClosestColor = cs[1];
	float colorDiff=distance(inColor,closestColor) / distance(secondClosestColor,closestColor);
	
	return (colorDiff < indexValue) ? closestColor : secondClosestColor;
}